// <auto-generated />
using System;
using System.Text.Json;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations.PostgreSQL
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240804182118_User_Notification_Channels")]
    partial class User_Notification_Channels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "notification_channel_type", new[] { "none", "sms", "email", "webhook", "telegram", "push_notification" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Exchanges.Exchange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_exchanges");

                    b.ToTable("exchanges", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Instruments.Instrument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BaseAsset")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("base_asset");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<long>("ExchangeId")
                        .HasColumnType("bigint")
                        .HasColumnName("exchange_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("QuoteAsset")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("quote_asset");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_instruments");

                    b.HasIndex("ExchangeId")
                        .HasDatabaseName("ix_instruments_exchange_id");

                    b.ToTable("instruments", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Instruments.InstrumentPrice", b =>
                {
                    b.Property<long>("ExchangeId")
                        .HasColumnType("bigint")
                        .HasColumnName("exchange_id");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.Property<DateTimeOffset>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision")
                        .HasColumnName("volume");

                    b.HasIndex("ExchangeId")
                        .HasDatabaseName("ix_instrument_prices_exchange_id");

                    b.ToTable("instrument_prices", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PriceRule.PriceCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<JsonDocument>("AdditionalValues")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("additional_values");

                    b.Property<string>("ConditionType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("condition_type");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("RuleId")
                        .HasColumnType("bigint")
                        .HasColumnName("rule_id");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_price_conditions");

                    b.HasIndex("RuleId")
                        .HasDatabaseName("ix_price_conditions_rule_id");

                    b.ToTable("price_conditions", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PriceRule.PriceRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<long>("InstrumentId")
                        .HasColumnType("bigint")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_enabled");

                    b.Property<DateTime?>("LastTriggeredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_triggered_at");

                    b.Property<double?>("LastTriggeredPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("last_triggered_price");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("NotificationChannel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("notification_channel_type")
                        .HasDefaultValue("none")
                        .HasColumnName("notification_channel");

                    b.Property<string>("UserId")
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_price_rules");

                    b.HasIndex("InstrumentId")
                        .HasDatabaseName("ix_price_rules_instrument_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_price_rules_user_id");

                    b.ToTable("price_rules", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PriceRule.PriceRuleTriggerLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<double?>("PriceChange")
                        .HasColumnType("double precision")
                        .HasColumnName("price_change");

                    b.Property<double?>("PriceChangePercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("price_change_percentage");

                    b.Property<long>("PriceRuleId")
                        .HasColumnType("bigint")
                        .HasColumnName("price_rule_id");

                    b.Property<JsonDocument>("PriceRuleSnapshot")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("price_rule_snapshot");

                    b.Property<DateTime>("TriggeredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("triggered_at");

                    b.HasKey("Id")
                        .HasName("pk_price_rule_trigger_logs");

                    b.HasIndex("PriceRuleId")
                        .HasDatabaseName("ix_price_rule_trigger_logs_price_rule_id");

                    b.ToTable("price_rule_trigger_logs", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Subscription.Subscription", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CancelAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancel_at");

                    b.Property<bool?>("CancelAtPeriodEnd")
                        .HasColumnType("boolean")
                        .HasColumnName("cancel_at_period_end");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_at");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("CurrentPeriodEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("current_period_end");

                    b.Property<DateTime?>("CurrentPeriodStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("current_period_start");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<JsonDocument>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("PriceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("price_id");

                    b.Property<long?>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TrialEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("trial_end");

                    b.Property<DateTime?>("TrialStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("trial_start");

                    b.Property<string>("UserId")
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_subscription");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_subscription_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_subscription_user_id");

                    b.ToTable("subscription", (string)null);
                });

            modelBuilder.Entity("Domain.Models.User.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("StripeCustomerId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("stripe_customer_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_users_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Models.User.UserNotificationChannel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ChannelType")
                        .IsRequired()
                        .HasColumnType("notification_channel_type")
                        .HasColumnName("channel_type");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("TelegramChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_chat_id");

                    b.Property<string>("TelegramUsername")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("telegram_username");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_notification_channels");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_notification_channels_user_id");

                    b.ToTable("user_notification_channels", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Data.Models.FifteenMinCandle", b =>
                {
                    b.Property<DateTimeOffset>("Bucket")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bucket")
                        .HasDefaultValueSql("now()");

                    b.Property<double>("Close")
                        .HasColumnType("double precision")
                        .HasColumnName("close");

                    b.Property<long>("ExchangeId")
                        .HasColumnType("bigint")
                        .HasColumnName("exchange_id");

                    b.Property<double>("High")
                        .HasColumnType("double precision")
                        .HasColumnName("high");

                    b.Property<double>("Low")
                        .HasColumnType("double precision")
                        .HasColumnName("low");

                    b.Property<double>("Open")
                        .HasColumnType("double precision")
                        .HasColumnName("open");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision")
                        .HasColumnName("volume");

                    b.HasIndex("ExchangeId")
                        .HasDatabaseName("ix_fifteen_min_candle_exchange_id");

                    b.ToTable((string)null);

                    b.ToView("fifteen_min_candle", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Data.Models.FiveMinCandle", b =>
                {
                    b.Property<DateTimeOffset>("Bucket")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bucket")
                        .HasDefaultValueSql("now()");

                    b.Property<double>("Close")
                        .HasColumnType("double precision")
                        .HasColumnName("close");

                    b.Property<long>("ExchangeId")
                        .HasColumnType("bigint")
                        .HasColumnName("exchange_id");

                    b.Property<double>("High")
                        .HasColumnType("double precision")
                        .HasColumnName("high");

                    b.Property<double>("Low")
                        .HasColumnType("double precision")
                        .HasColumnName("low");

                    b.Property<double>("Open")
                        .HasColumnType("double precision")
                        .HasColumnName("open");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision")
                        .HasColumnName("volume");

                    b.HasIndex("ExchangeId")
                        .HasDatabaseName("ix_five_min_candle_exchange_id");

                    b.ToTable((string)null);

                    b.ToView("five_min_candle", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Data.Models.OneHourCandle", b =>
                {
                    b.Property<DateTimeOffset>("Bucket")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bucket")
                        .HasDefaultValueSql("now()");

                    b.Property<double>("Close")
                        .HasColumnType("double precision")
                        .HasColumnName("close");

                    b.Property<long>("ExchangeId")
                        .HasColumnType("bigint")
                        .HasColumnName("exchange_id");

                    b.Property<double>("High")
                        .HasColumnType("double precision")
                        .HasColumnName("high");

                    b.Property<double>("Low")
                        .HasColumnType("double precision")
                        .HasColumnName("low");

                    b.Property<double>("Open")
                        .HasColumnType("double precision")
                        .HasColumnName("open");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision")
                        .HasColumnName("volume");

                    b.HasIndex("ExchangeId")
                        .HasDatabaseName("ix_one_hour_candle_exchange_id");

                    b.ToTable((string)null);

                    b.ToView("one_hour_candle", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Data.Models.OneMinCandle", b =>
                {
                    b.Property<DateTimeOffset>("Bucket")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bucket")
                        .HasDefaultValueSql("now()");

                    b.Property<double>("Close")
                        .HasColumnType("double precision")
                        .HasColumnName("close");

                    b.Property<long>("ExchangeId")
                        .HasColumnType("bigint")
                        .HasColumnName("exchange_id");

                    b.Property<double>("High")
                        .HasColumnType("double precision")
                        .HasColumnName("high");

                    b.Property<double>("Low")
                        .HasColumnType("double precision")
                        .HasColumnName("low");

                    b.Property<double>("Open")
                        .HasColumnType("double precision")
                        .HasColumnName("open");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision")
                        .HasColumnName("volume");

                    b.HasIndex("ExchangeId")
                        .HasDatabaseName("ix_one_min_candle_exchange_id");

                    b.ToTable((string)null);

                    b.ToView("one_min_candle", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TenMinCandle", b =>
                {
                    b.Property<DateTimeOffset>("Bucket")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bucket")
                        .HasDefaultValueSql("now()");

                    b.Property<double>("Close")
                        .HasColumnType("double precision")
                        .HasColumnName("close");

                    b.Property<long>("ExchangeId")
                        .HasColumnType("bigint")
                        .HasColumnName("exchange_id");

                    b.Property<double>("High")
                        .HasColumnType("double precision")
                        .HasColumnName("high");

                    b.Property<double>("Low")
                        .HasColumnType("double precision")
                        .HasColumnName("low");

                    b.Property<double>("Open")
                        .HasColumnType("double precision")
                        .HasColumnName("open");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision")
                        .HasColumnName("volume");

                    b.HasIndex("ExchangeId")
                        .HasDatabaseName("ix_ten_min_candle_exchange_id");

                    b.ToTable((string)null);

                    b.ToView("ten_min_candle", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Instruments.Instrument", b =>
                {
                    b.HasOne("Domain.Models.Exchanges.Exchange", "Exchange")
                        .WithMany("Instruments")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_instruments_exchanges_exchange_id");

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("Domain.Models.Instruments.InstrumentPrice", b =>
                {
                    b.HasOne("Domain.Models.Exchanges.Exchange", "Exchange")
                        .WithMany()
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_instrument_prices_exchanges_exchange_id");

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("Domain.Models.PriceRule.PriceCondition", b =>
                {
                    b.HasOne("Domain.Models.PriceRule.PriceRule", "Rule")
                        .WithMany("Conditions")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_conditions_price_rules_rule_id");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("Domain.Models.PriceRule.PriceRule", b =>
                {
                    b.HasOne("Domain.Models.Instruments.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_rules_instruments_instrument_id");

                    b.HasOne("Domain.Models.User.User", "User")
                        .WithMany("PriceRules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_price_rules_users_user_id");

                    b.Navigation("Instrument");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.PriceRule.PriceRuleTriggerLog", b =>
                {
                    b.HasOne("Domain.Models.PriceRule.PriceRule", "PriceRule")
                        .WithMany("ActivationLogs")
                        .HasForeignKey("PriceRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_rule_trigger_logs_price_rules_price_rule_id");

                    b.Navigation("PriceRule");
                });

            modelBuilder.Entity("Domain.Models.Subscription.Subscription", b =>
                {
                    b.HasOne("Domain.Models.User.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_subscription_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.User.UserNotificationChannel", b =>
                {
                    b.HasOne("Domain.Models.User.User", "User")
                        .WithMany("NotificationChannels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_notification_channels_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.FifteenMinCandle", b =>
                {
                    b.HasOne("Domain.Models.Exchanges.Exchange", "Exchange")
                        .WithMany()
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fifteen_min_candle_exchanges_exchange_id");

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.FiveMinCandle", b =>
                {
                    b.HasOne("Domain.Models.Exchanges.Exchange", "Exchange")
                        .WithMany()
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_five_min_candle_exchanges_exchange_id");

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.OneHourCandle", b =>
                {
                    b.HasOne("Domain.Models.Exchanges.Exchange", "Exchange")
                        .WithMany()
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_one_hour_candle_exchanges_exchange_id");

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.OneMinCandle", b =>
                {
                    b.HasOne("Domain.Models.Exchanges.Exchange", "Exchange")
                        .WithMany()
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_one_min_candle_exchanges_exchange_id");

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TenMinCandle", b =>
                {
                    b.HasOne("Domain.Models.Exchanges.Exchange", "Exchange")
                        .WithMany()
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ten_min_candle_exchanges_exchange_id");

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("Domain.Models.Exchanges.Exchange", b =>
                {
                    b.Navigation("Instruments");
                });

            modelBuilder.Entity("Domain.Models.PriceRule.PriceRule", b =>
                {
                    b.Navigation("ActivationLogs");

                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("Domain.Models.User.User", b =>
                {
                    b.Navigation("NotificationChannels");

                    b.Navigation("PriceRules");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
